class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
         if ( n < 2) {//不可以交易 只有一天的价格 
            return 0;
        }
       int[][] dp = new int[n][2];
       dp[0][0] = 0;
       dp[0][1] = -prices[0];
       for (int i = 1; i < n; i++) {
         dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);
         dp[i][1] = Math.max(dp[i-1][1], -prices[i]);
       }
       return dp[n - 1][0];
    }
}

2.状态数组定义
  dp[第i天][0为手中不持股票；1为手中持有股票]

1.子问题：
dp[i][0] 第i天手中不持股票的利润
  dp[i - 1][0] ：今天不持股，假设我今天什么都不操作，当然可以从昨天不持股转移过来，这一点是显然的；
  dp[i - 1][1] + prices[i]：昨天持股，就在索引为 i 的这一天，我卖出了股票，状态由 1 变成了 0，此时获得利润，因此加上这一天的股价。
dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);
/**********************************************************/
dp[i][1] 第i天手中持有股票的利润
  dp[i - 1][1] ：今天持股，假设我今天什么都不操作，当然可以从昨天持股转移过来，这一点是显然的；
  -prices[i]：**请注意：**状态 1 不能由状态 0 来，因为事实上，状态 0 特指：“卖出股票以后不持有股票的状态”，  请注意这个状态和“没有进行过任何一次交易的不持有股票的状态”的区别。
  PS:第i天手中的股票要么是今天交易来的-prices[i]，要么是昨天交易的dp[i - 1][1]
dp[i][1] = max(dp[i - 1][1], -prices[i]);
  

3.DP方程
  dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);
  dp[i][1] = Math.max(dp[i-1][1], -prices[i]);
