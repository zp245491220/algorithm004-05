[1,3,1]
[1,5,1]
[4,2,1]
以二位数组为例，从右下角向左上角递归得到所有步数
[7,6,3]
[12,8,2]
[7,3,1]
所有位置以选取最小值为优先得到上面各个位置到右下角的最小值

1.子问题   
    m=grid[0].length
    n=grid.length
    初始化dp[m][n]=grid[m][n]
    dp[m-1][n]=gird[m-1][n]+dp[m][n] //当前格子的值加上下一个位置格子的值
    dp[m][n-1]=gird[m][n-1]+dp[m][n]    
    正确路径为grid[m][n]=Min( dp[m-1][n],dp[m][n-1])
2.数组状态
    dp[m][n]表示第M行第N列元素到最右下加位置的最小步数
3.DP方程
   grid[m][n]=Min( dp[m-1][n],dp[m][n-1])
  return grid[0][0]
  
  class Solution {
    public int minPathSum(int[][] grid) {
        int m =grid.length;//列边界
        int n =grid[0].length;//行边界
      int[][] dp = new int[m][n];
        for (int i = grid.length - 1; i >= 0; i--) {
            for (int j = grid[0].length - 1; j >= 0; j--) {
                if(i == m - 1 && j != n - 1)//列最顶端 在行中
                    dp[i][j] = grid[i][j] +  dp[i][j + 1];
                else if(j == n - 1 && i != m - 1)//行的最左端在列中
                    dp[i][j] = grid[i][j] + dp[i + 1][j];
                else if(j != n - 1 && i != m - 1)//在行列中间 即左、上位置都可以移动 选取最小值
                    dp[i][j] = grid[i][j] + Math.min(dp[i + 1][j], dp[i][j + 1]);
                else
                    dp[i][j] = grid[i][j];
            }
        }
        return dp[0][0];
    }
}
  
